import React, { useEffect, useState, useContext } from "react";
import PropTypes from "prop-types";
import Header from "./Header";
import Footer from "./Footer";
import Head from "next/head";
import { Context as TenantContext } from "../../context/TenantContext";
import { Context as AuthContext } from "../../context/AuthContext";
import { Context as UserContext } from "../../context/UserContext";
import { ToastContainer, Slide } from "react-toastify";
import { useRouter } from "next/router";
import { useInterval } from "../../hooks/useInterval";
import useTenantUserAuth from "../../hooks/useTenantUserAuth";
import styles from "../../styles/Layout.module.scss";
import TenantHeader from "./TenantHeader";
import UserUnverified from "../user/UserUnverified";
import PaddleLoader from "../commerce/PaddleLoader";
import SelectPlan from "../plan/SelectPlan";

function Layout({ children, brandName }) {
  const router = useRouter();
  const {
    state: { tenant },
    setTenant,
    getTenant,
  } = useContext(TenantContext);
  const {
    state: { auth, fileAuth },
    getAuth,
    getFileAuth,
  } = useContext(AuthContext);
  const { getUserCart } = useContext(UserContext);

  const [userTenantAdminAuthorized, setUserTenantAdminAuthorized] =
    useState(false);
  const [showChildren, setShowChildren] = useState(false);
  const [showUserVerification, setShowUserVerification] = useState(false);
  const [showSelectTenantPlan, setShowSelectTenantPlan] = useState(false);

  const setDisposition = () => {
    setShowUserVerification(false);
    setShowSelectTenantPlan(false);
    setShowChildren(false);

    if (auth?.status) {
      if (
        router.pathname === "/user/verification/email/[key]" ||
        router.pathname === "/auth/signout"
      ) {
        setShowChildren(true);
      } else {
        if (auth.status === "SIGNED_OUT") {
          // user is signed out, show the app
          setShowChildren(true);
        } else if (auth.status === "SIGNED_IN") {
          if (!auth.user.isVerified) {
            setShowUserVerification(true);
          } else {
            if (auth.user.tenant) {
              if (tenant) {
                // correct tenant check here
                if (auth.user.tenant._id !== tenant._id) {
                  // the user is signed in but trying to access a tenant that does not match their account.
                  // set the tenant accordingly and redirect to the root page
                  getTenant({ id: auth.user.tenant._id });
                  router.push("/");
                  return;
                }
                const { isAdmin } = useTenantUserAuth({ tenant, auth });
                if (isAdmin) {
                  setUserTenantAdminAuthorized(true);
                  if (!tenant.plan) {
                    // user is tenant admin in and the tenant needs a plan
                    setShowSelectTenantPlan(true);
                  } else {
                    setShowChildren(true);
                  }
                } else {
                  setUserTenantAdminAuthorized(false);
                  setShowChildren(true);
                }
              } else {
                // user is signed in but there is no tenant in state
              }
            } else {
              // user is signed in but has no tenant
              // ensure no tenant
              if (tenant) {
                setTenant({ tenant: null });
              }
              setShowChildren(true);
            }
          }
        } else {
          // no valid sign in status
          setShowChildren(false);
        }
      }
    }
  };

  // get the auth user
  useEffect(() => {
    getAuth();
    setDisposition();
  }, []);

  // get the user's cart and tenant if signed in
  useEffect(() => {
    if (auth?.status) {
      if (auth.user?.tenant) {
        setTenant({ tenant: auth.user.tenant });
      }

      if (auth.status === "SIGNED_IN" && auth.user?.isVerified) {
        getUserCart({ id: auth.user._id });
      }

      if (
        auth.status === "SIGNED_OUT" ||
        (auth.status === "SIGNED_IN" && auth?.user?.isVerified)
      ) {
        // get file auth
        getFileAuth();
      }
    }
  }, [auth]);

  useInterval(() => {
    getFileAuth();
  }, 240000); // 4 mins

  // ensure the appropriate content is loaded for user
  useEffect(() => {
    setDisposition();
  }, [auth, tenant, router]);



  const unverifiedUserAccount = () => {
    return auth.status === "SIGNED_IN" && !auth.user?.isVerified;
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Traverston</title>
        <meta name="description" content="Generated by create next app ok" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* Global Containers */}
      <ToastContainer
        theme="light"
        position="bottom-right"
        transition={Slide}
        autoClose={3000}
        hideProgressBar={true}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
      />
      <PaddleLoader />

      <Header brandName={brandName} />
      {tenant && !unverifiedUserAccount() ? (
        <TenantHeader
          tenant={tenant}
          admin={userTenantAdminAuthorized}
          fileAuth={fileAuth}
        />
      ) : (
        <></>
      )}
      <main className={`${styles.main} mt-5 px-4 px-md-5 py-1`}>
        {showUserVerification ? <UserUnverified /> : <></>}
        {showSelectTenantPlan ? <SelectPlan /> : <></>}
        {showChildren ? <>{children}</> : <></>}
      </main>
      <Footer />
    </div>
  );
}

Layout.propTypes = {
  children: PropTypes.object,
  brandName: PropTypes.string,
};

export default Layout;

import React, { useEffect, useContext } from "react";
import PropTypes from "prop-types";
import Header from "./Header";
import Footer from "./Footer";
import Head from "next/head";
import { Context as ClientContext } from "../../context/ClientContext";
import { Context as AuthContext } from "../../context/AuthContext";
import { Context as UserContext } from "../../context/UserContext";
import { ToastContainer, Slide } from "react-toastify";
import { useRouter } from "next/router";
import { useInterval } from "../../hooks/useInterval";
import styles from "../../styles/Layout.module.scss";

function Layout({ children, brandName }) {
  const router = useRouter();
  const { clientKey } = router.query;
  const {
    state: { client },
    setClient,
    getClient,
  } = useContext(ClientContext);
  const {
    state: { auth },
    getAuth,
    getFileAuth
  } = useContext(AuthContext);
  const { getUserCart } = useContext(UserContext);

  // get the auth user
  useEffect(() => {
    getAuth();
  }, []);

  // get the user's cart and client if signed in
  useEffect(() => {
    if (auth?.status === "SIGNED_IN") {
      getUserCart({ id: auth.user._id });
    }
    if (auth?.user?.client) {
      setClient({ client: auth.user.client });
    }
    if(auth?.status) {
      // get file auth
      getFileAuth();
      

    }
  }, [auth]);

  useInterval(() => {
    getFileAuth();
  }, 240000); // 4 mins

  // ensure the appropriate client is loaded for user
  useEffect(() => {
    if (
      client &&
      auth?.status === "SIGNED_IN" &&
      auth?.user?.client?._id !== client._id
    ) {
      // the user is signed in but trying to access a client that does not match their account.
      // set the client accordingly and redirect to the root page
      if (auth?.user?.client) {
        getClient({ id: auth.user.client._id });
      } else {
        setClient({ client: auth.user.client });
      }
      router.push("/");
    }
  }, [auth, client]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Traverston</title>
        <meta name="description" content="Generated by create next app ok" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ToastContainer
        theme="light"
        position="bottom-right"
        transition={Slide}
        autoClose={3000}
        hideProgressBar={true}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
      />
      <Header brandName={brandName} />

      <main className={`${styles.main} px-4 px-md-5`}>{children}</main>

      <Footer />
    </div>
  );
}

Layout.propTypes = {
  children: PropTypes.object,
  brandName: PropTypes.string,
};

export default Layout;
